{"version":3,"sources":["components/todo.jsx","components/addtodo.jsx","components/todos.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","Fragment","style","width","className","this","props","index","type","defaultChecked","todo","isDone","onChange","fooDoneDone","renderTodo","onClick","fooDelete","id","value","Component","AddTodo","state","defaultValue","addTodoValue","handleChange","e","setState","target","clearInput","document","getElementById","addTodo","fooAddTodo","placeholder","Todos","todos","handleDelete","filter","t","handleDone","map","addNewTodo","push","getTime","console","log","Date","key","colSpan","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d926ad2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n \nclass Todo extends Component {\n \n    render() {\n        return (\n            <React.Fragment >\n                <td style={{ width: 10 }} className=\"text-center\">\n                    {this.props.index}\n                </td>\n                <td style={{ width: 15 }} className=\"text-center\">\n                    <input type=\"checkbox\" defaultChecked={this.props.todo.isDone}  onChange={() => this.props.fooDoneDone(this.props.todo)} />\n                </td>\n                <td>\n                    {   \n                        this.renderTodo()\n                    }\n                </td>\n                <td style={{ width: 100 }} className=\"text-center\">\n                    <button onClick={() => this.props.fooDelete(this.props.todo.id)} className=\"btn btn-danger btn-sm\">Delete</button>\n                </td>\n            </React.Fragment>\n        );\n    }\n \n    renderTodo(){\n        if(this.props.todo.isDone)\n        return <s>{this.props.todo.value}</s>;\n        else\n        return this.props.todo.value;\n    }\n \n}\n \nexport default Todo;","import React, { Component } from 'react';\n \nclass AddTodo extends Component {\n    state = {\n        defaultValue: \"\",\n        value: this.props.addTodoValue\n    }\n \n    handleChange = (e) => {\n        //Updating local component state\n        this.setState({\n            value: e.target.value\n        });\n    }\n \n    clearInput = () => {\n        //Clear existing value in input\n        document.getElementById(\"todoValue\").value = \"\";\n        \n        //Updating local component state\n        this.setState({value:\"\"});\n    }\n \n    addTodo = () => {\n        //Call method reference in Todos component using props\n        this.props.fooAddTodo(this.state.value);\n        this.clearInput();\n    }\n \n    render() {\n        return (\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" className=\"form-control\" id=\"todoValue\" placeholder=\"ToDo\" onChange={this.handleChange} />\n                <div className=\"input-group-append\">\n                    <button onClick={this.addTodo} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Add New ToDo</button>\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default AddTodo;","import React, { Component } from 'react';\n \nimport Todo from './todo';\nimport AddTodo from './addtodo';\n \nclass Todos extends Component {\n \n    //Component state with default values\n    state = {\n        addTodoValue: \"\",\n        todos: [\n            {\n                id: 1,\n                value: \"todo 1\",\n                isDone: false\n            },\n            {\n                id: 2,\n                value: \"todo 2\",\n                isDone: true\n            },\n            {\n                id: 3,\n                value: \"todo 3\",\n                isDone: false\n            }\n        ]\n    }\n \n    //Local helper method to get date\n    getTime() {\n        let d = new Date();\n        var n = d.getTime();\n        return n;\n    }\n \n    //method called from Todo component\n    handleDelete = todo => {\n        const todos = this.state.todos.filter((t) => {\n            return t.id !== todo\n        });\n        this.setState({ todos });\n    }\n \n    handleDone = todo => {\n        const todos = [...this.state.todos];\n        todos.map((t) => {\n            if (t.id === todo.id) {\n                t.isDone = !t.isDone;\n            }\n            return t;\n        });\n        this.setState({todos});\n    }\n \n    //method called from AddTodo component\n    addNewTodo = value => {\n        if (value) {\n            const todos = [...this.state.todos];\n            todos.push(\n                {\n                    id: this.getTime(),\n                    value: value,\n                    isDone: false\n                }\n            );\n            this.setState({ addTodoValue: \"\", todos })\n        } else {\n            console.log(\"Please Add Todo Text\");\n        }\n    }\n \n    render() {\n        return (\n            <table className=\"table\">\n                <tbody>\n                    {this.state.todos.map((todo, index) => (\n                        <tr key={todo.id}>\n                            <Todo index={index+1} todo={todo} fooDelete={this.handleDelete} fooDoneDone={this.handleDone} />\n                        </tr>\n                    ))}\n                    <tr>\n                        <td colSpan=\"4\" className=\"text-center\">\n                            <AddTodo fooAddTodo={this.addNewTodo} addTodoValue={this.state.addTodoValue} />\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n \nexport default Todos;","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/todos';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center\">ToDo App in ReactJS</h1>\n        <Todos />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}